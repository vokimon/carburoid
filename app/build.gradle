buildscript {
    dependencies {
        classpath 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
        classpath 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2'
    }
}

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace = 'net.canvoki.carburoid'
    compileSdk = 34

    defaultConfig {
        applicationId "net.canvoki.carburoid"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        viewBinding = true
    }
    testOptions {
        unitTests.all {
            jvmArgs '-XX:+EnableDynamicAgentLoading'
        }
    }
}
tasks.withType(Test) {
    testLogging {
        events "failed", "skipped"//, "standardOut", "standardError", "passed", "started" 
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
}
dependencies {
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.13.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:latest'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.code.gson:gson:2.10.1'
    testImplementation "io.mockk:mockk:1.13.8"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:latest"
    testImplementation "org.jetbrains.kotlin:kotlin-test:latest"
    testImplementation("org.robolectric:robolectric:4.16")

    androidTestImplementation("androidx.test:core:1.5.0")
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}

// Custom task to convert YAML to Android strings
task yamlToAndroidStrings {
    doLast {
        def yamlDir = file('src/main/translations/')
        def resDir = file('src/main/res/')

        if (!yamlDir.exists()) {
            println "Translations directory not found: ${yamlDir.absolutePath}"
            return
        }

        yamlDir.eachFileMatch(groovy.io.FileType.FILES, ~/.*\.(yml|yaml)/) { yamlFile ->
            def langCode = yamlFile.name - '.yml' - '.yaml'  // Elimina l'extensiÃ³
            langCode = langCode.toLowerCase()

            def qualifier = (langCode == 'en' || langCode == 'default') ? 'values' : "values-${langCode}"
            def targetDir = new File(resDir, qualifier)
            targetDir.mkdirs()

            def xmlFile = new File(targetDir, 'strings.xml')
            convertYamlToAndroidXml(yamlFile, xmlFile)
            println "Generated: ${xmlFile.absolutePath}"
        }
    }
}

// Android-specific string escaping
def escapeAndroidString(input) {
    return input
        .replace("\\", "\\\\")  // Backslash
        .replace("'", "\\'")    // Single quote
        .replace("\"", "\\\"")  // Double quote
        .replace("\n", "\\n")   // Newline
        .replace("\t", "\\t")   // Tab
        .replace("\r", "\\r")   // Carriage return
}

// Helper method for YAML to XML conversion
def convertYamlToAndroidXml(yamlFile, xmlFile) {
    def mapper = new com.fasterxml.jackson.databind.ObjectMapper(
        new com.fasterxml.jackson.dataformat.yaml.YAMLFactory()
    )

    def yamlContent = mapper.readValue(yamlFile.text, Map)

    // Create XML using DOM
    def factory = javax.xml.parsers.DocumentBuilderFactory.newInstance()
    factory.setNamespaceAware(true)
    def builder = factory.newDocumentBuilder()
    def doc = builder.newDocument()

    // Add comment header
    def commentText = " AUTO-GENERATED from ${yamlFile.name}. DO NOT EDIT THIS FILE DIRECTLY! "
    def comment = doc.createComment(commentText)
    doc.appendChild(comment)

    def resourcesElement = doc.createElement('resources')
    doc.appendChild(resourcesElement)

    // Process the YAML content recursively
    processYamlMap(yamlContent, '', resourcesElement)

    // Write XML with formatting
    def transformerFactory = javax.xml.transform.TransformerFactory.newInstance()
    def transformer = transformerFactory.newTransformer()
    transformer.setOutputProperty(javax.xml.transform.OutputKeys.INDENT, 'yes')
    transformer.setOutputProperty('{http://xml.apache.org/xslt}indent-amount', '4')
    transformer.setOutputProperty(javax.xml.transform.OutputKeys.ENCODING, 'utf-8')
    transformer.setOutputProperty(javax.xml.transform.OutputKeys.STANDALONE, 'yes')

    def result = new javax.xml.transform.stream.StreamResult(xmlFile)
    def source = new javax.xml.transform.dom.DOMSource(doc)
    transformer.transform(source, result)
}

// Separate method to avoid Groovy closure recursion issues
def processYamlMap(map, prefix, resourcesElement) {
    map.each { key, value ->
        def fullKey = prefix.isEmpty() ? key.toString() : "${prefix}__${key}"
        if (value instanceof Map) {
            processYamlMap(value, fullKey, resourcesElement)
        } else if (value instanceof String) {
            def finalKey = fullKey.toLowerCase()
            def stringElement = resourcesElement.ownerDocument.createElement('string')
            stringElement.setAttribute('name', finalKey)
            def escapedValue = escapeAndroidString(value)
            stringElement.setTextContent(escapedValue)
            resourcesElement.appendChild(stringElement)
        }
    }
}

// Run the conversion before build
preBuild.dependsOn yamlToAndroidStrings

