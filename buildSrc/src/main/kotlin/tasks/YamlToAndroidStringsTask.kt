package tasks

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory
import java.io.File
import java.util.*
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.OutputKeys
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult

fun escapeAndroidString(input: String): String {
    var escaped = input
        .replace("\\", "\\\\")
        .replace("'", "\\'")
        .replace("\"", "\\\"")
        .replace("\n", "\\n")
        .replace("\t", "\\t")
        .replace("\r", "\\r")
    if (escaped.startsWith("??")) {
        escaped = "\\?" + escaped.substring(1)
    } else if (escaped.contains("??")) {
        escaped = escaped.replace("??", "\\?\\?")
    }
    return escaped
}

fun extractParams(template: String): List<Pair<String, String>> {
    val regex = "\\{\\s*([^}:\\s]+)\\s*(?::\\s*([^}\\s]+)\\s*)?}".toRegex()
    return regex.findAll(template).map { match ->
        val paramName = match.groupValues[1].trim()
        val format = match.groupValues.getOrNull(2)?.takeIf { it.isNotEmpty() } ?: "s"
        paramName to format
    }.toList()
}

fun parametersToXml(template: String, params: List<Pair<String, String>>): String {
    return template.replace(Regex("""\{[^}]+\}"""), "%1\\\$s")
}


object YamlToAndroidStringsTask {
    private val defaultLanguage = "en"

    fun run(yamlDir: File, resDir: File) {
        if (!yamlDir.exists()) {
            println("Translations directory not found: ${yamlDir.absolutePath}")
            return
        }

        val languageCodes = yamlDir
            .listFiles { file -> file.extension in listOf("yml", "yaml") }
            ?.map { it.nameWithoutExtension.lowercase(Locale.ROOT) }
            ?.toSortedSet()
            ?: emptySet()

        val arraysFile = File(resDir, "values/arrays_languages.xml")
        arraysFile.parentFile.mkdirs()
        arraysFile.writeText(
            buildString {
                appendLine("""<?xml version="1.0" encoding="utf-8"?>""")
                appendLine("<!-- AUTO-GENERATED FILE. DO NOT EDIT MANUALLY. -->")
                appendLine("<resources>")
                appendLine("    <string-array name=\"supported_language_codes\">")
                languageCodes.forEach {
                    appendLine("        <item>$it</item>")
                }
                appendLine("    </string-array>")
                appendLine("</resources>")
            }
        )
        println("Generated language arrays: ${languageCodes.joinToString(", ")}")

        languageCodes.forEach { langCode ->
            val file = yamlDir.resolve("$langCode.yaml").takeIf { it.exists() }
                ?: yamlDir.resolve("$langCode.yml")

            if (!file.exists()) return@forEach

            val qualifier = if (langCode == defaultLanguage || langCode == "default") "values" else "values-$langCode"
            val targetDir = File(resDir, qualifier)
            targetDir.mkdirs()

            val xmlFile = File(targetDir, "strings.xml")
            convertYamlToAndroidXml(file, xmlFile)
            println("Generated: ${xmlFile.absolutePath}")
        }
    }

    private fun convertYamlToAndroidXml(yamlFile: File, xmlFile: File) {
        val mapper = ObjectMapper(YAMLFactory())
        val yamlContent = mapper.readValue(yamlFile, Map::class.java) as Map<*, *>

        val docBuilder = DocumentBuilderFactory.newInstance().apply { isNamespaceAware = true }.newDocumentBuilder()
        val doc = docBuilder.newDocument()

        val comment = doc.createComment(" AUTO-GENERATED from ${yamlFile.name}. DO NOT EDIT THIS FILE DIRECTLY! ")
        doc.appendChild(comment)

        val resources = doc.createElement("resources")
        doc.appendChild(resources)

        processYamlMap(yamlContent, "", resources)

        val transformer = TransformerFactory.newInstance().newTransformer().apply {
            setOutputProperty(OutputKeys.INDENT, "yes")
            setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4")
            setOutputProperty(OutputKeys.ENCODING, "utf-8")
            setOutputProperty(OutputKeys.STANDALONE, "yes")
        }

        transformer.transform(DOMSource(doc), StreamResult(xmlFile))
    }

    private fun processYamlMap(map: Map<*, *>, prefix: String, resources: org.w3c.dom.Element) {
        val doc = resources.ownerDocument
        map.forEach { (key, value) ->
            val fullKey = if (prefix.isEmpty()) "$key" else "${prefix}__$key"
            when (value) {
                is Map<*, *> -> processYamlMap(value as Map<*, *>, fullKey, resources)
                is String -> {
                    val stringElem = doc.createElement("string")
                    stringElem.setAttribute("name", fullKey.lowercase(Locale.ROOT))
                    stringElem.textContent = escapeAndroidString(value)
                    resources.appendChild(stringElem)
                }
            }
        }
    }
}

